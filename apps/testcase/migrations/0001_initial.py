# Generated by Django 3.2.4 on 2021-06-08 11:53

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('testsuite', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, help_text='更新时间', verbose_name='更新时间')),
                ('creator', models.CharField(help_text='创建人', max_length=150, verbose_name='创建人')),
                ('modifier', models.CharField(help_text='最后修改人', max_length=150, verbose_name='最后修改人')),
                ('testcase_name', models.CharField(help_text='测试用例名称', max_length=128, verbose_name='测试用例名称')),
                ('testcase_desc', models.CharField(blank=True, default='', help_text='测试用例描述', max_length=128, verbose_name='测试用例描述')),
                ('testsuite', models.ForeignKey(help_text='所属套件ID', on_delete=django.db.models.deletion.CASCADE, to='testsuite.testsuite', verbose_name='所属套件ID')),
            ],
            options={
                'verbose_name': '测试用例',
                'verbose_name_plural': '测试用例',
                'db_table': 'testcase_info',
            },
        ),
        migrations.CreateModel(
            name='TestStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teststep_name', models.CharField(help_text='测试步骤名称', max_length=128, verbose_name='测试步骤名称')),
                ('method', models.CharField(choices=[('GET', 'GET方法'), ('POST', 'POST方法'), ('PUT', 'PUT方法'), ('PATCH', 'PATCH方法'), ('DELETE', 'DELETE方法')], help_text='请求方法', max_length=10, verbose_name='请求方法')),
                ('url_path', models.CharField(help_text='请求路径', max_length=512, verbose_name='请求路径')),
                ('desc', models.CharField(blank=True, default='', help_text='用例描述', max_length=512, verbose_name='用例描述')),
                ('json', models.JSONField(blank=True, help_text='请求体中json类型参数', null=True, verbose_name='请求体中json类型参数')),
                ('params', models.JSONField(blank=True, help_text='查询字符串参数', null=True, verbose_name='查询字符串参数')),
                ('data', models.JSONField(blank=True, help_text='请求体中form-data或x-www-form-urlencoded类型参数', null=True, verbose_name='请求体中form-data或x-www-form-urlencoded类型参数')),
                ('headers', models.JSONField(blank=True, help_text='请求头参数', null=True, verbose_name='请求头参数')),
                ('cookies', models.JSONField(blank=True, help_text='cookies参数', null=True, verbose_name='cookies参数')),
                ('export', models.JSONField(blank=True, help_text='测试步骤导出变量', null=True, verbose_name='测试步骤导出变量')),
                ('extract', models.JSONField(blank=True, help_text='测试步骤提取变量', null=True, verbose_name='测试步骤提取变量')),
                ('quote_testcase_id', models.PositiveIntegerField(blank=True, help_text='引用的用例ID', null=True, verbose_name='引用的用例ID')),
                ('testcase', models.ForeignKey(help_text='所属用例', on_delete=django.db.models.deletion.CASCADE, related_name='teststeps', to='testcase.testcase', verbose_name='所属用例')),
            ],
            options={
                'verbose_name': '测试步骤',
                'verbose_name_plural': '测试步骤',
                'db_table': 'teststep_info',
            },
        ),
        migrations.CreateModel(
            name='TestStepValidator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('validator_type', models.CharField(choices=[('equal_integer', '实际结果(整数类型)等于预期结果(整数类型)'), ('equal_float', '实际结果(小数类型)等于预期结果(小数类型)'), ('equal_boolean', '实际结果(布尔类型)等于预期结果(布尔类型)'), ('equal_null', '实际结果(null类型)等于预期结果(null类型)'), ('equal_string', '实际结果(字符串类型)等于预期结果(字符串类型)'), ('not_equal_integer', '实际结果(整数类型)不等于预期结果(整数类型)'), ('not_equal_float', '实际结果(小数类型)不等于预期结果(小数类型)'), ('not_equal_boolean', '实际结果(布尔类型)不等于预期结果(布尔类型)'), ('not_equal_null', '实际结果(null类型)不等于预期结果(null类型)'), ('not_equal_string', '实际结果(字符串类型)不等于预期结果(字符串类型)'), ('contained_by', '预期结果(字符串类型)中包含实际结果(字符串类型)'), ('contains', '实际结果(字符串类型)中包含预期结果(字符串类型)'), ('startswith', '实际结果(字符串类型)以预期结果(字符串类型)开头'), ('endswith', '实际结果(字符串类型)以预期结果(字符串类型)结尾'), ('startswith_by', '预期结果(字符串类型)以实际结果(字符串类型)开头'), ('endswith_by', '预期结果(字符串类型)以实际结果(字符串类型)结尾'), ('greater_or_equals_integer', '实际结果(整数类型)大于或等于预期结果(整数类型)'), ('greater_or_equals_float', '实际结果(小数类型)大于或等于预期结果(小数类型)'), ('greater_than_integer', '实际结果(整数类型)大于预期结果(整数类型)'), ('greater_than_float', '实际结果(小数类型)大于预期结果(小数类型)'), ('less_or_equals_integer', '实际结果(整数类型)小于或等于预期结果(整数类型)'), ('less_or_equals_float', '实际结果(小数类型)小于或等于预期结果(小数类型)'), ('less_than_integer', '实际结果(整数类型)小于预期结果(整数类型)'), ('less_than_float', '实际结果(小数类型)小于预期结果(小数类型)'), ('length_equal', '实际结果长度(整数类型)等于预期结果(整数类型)'), ('length_not_equal', '实际结果长度(整数类型)不等于预期结果(整数类型)'), ('length_greater_or_equals', '实际结果长度(整数类型)大于或等于预期结果(整数类型)'), ('length_greater_than', '实际结果长度(整数类型)大于预期结果(整数类型)'), ('length_less_or_equals', '实际结果长度(整数类型)小于或等于预期结果(整数类型)'), ('length_less_than', '实际结果长度(整数类型)小于预期结果(整数类型)'), ('regex_match', '实际结果是否符合预期结果的正则表达式匹配规则')], help_text='提取器类型', max_length=56, verbose_name='提取器类型')),
                ('jmespath_expression', models.CharField(help_text='jmespath表达式', max_length=512, verbose_name='jmespath表达式')),
                ('expected_value', models.TextField(help_text='预期结果', verbose_name='预期结果')),
                ('desc', models.CharField(blank=True, default='', help_text='描述', max_length=512, verbose_name='描述')),
                ('teststep', models.ForeignKey(blank=True, help_text='所属测试步骤', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='step_validators', to='testcase.teststep', verbose_name='所属测试步骤')),
            ],
            options={
                'verbose_name': '测试步骤的校验器',
                'verbose_name_plural': '测试步骤的校验器',
                'db_table': 'validator_info',
            },
        ),
    ]
