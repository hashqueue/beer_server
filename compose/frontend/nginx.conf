worker_processes 1;

user nginx;
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024; # increase if you have lots of clients
    accept_mutex off; # set to 'on' if nginx worker_processes > 1
    use epoll;
    # 'use epoll;' to enable for Linux 2.6+
    # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
    upstream app_server {
        # fail_timeout=0 means we always retry an upstream even if it failed
        # to return a good HTTP response

        # for UNIX domain socket setups
        # server unix:/tmp/gunicorn.sock fail_timeout=0;

        # for a TCP configuration
        server beer:8000 fail_timeout=0;
    }
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    keepalive_timeout  65;

    server {
        # use 'listen 80 deferred;' for Linux
        # use 'listen 80 accept_filter=httpready;' for FreeBSD
        listen 80 deferred;

        # set the correct host(s) for your site
        server_name 127.0.0.1;
        charset utf-8;
        # 限制用户上传文件大小
        client_max_body_size 10M;
        keepalive_timeout 5;

        location / {
          root  /app;
          index index.html index.htm;
          try_files $uri $uri/ /index.html;
        }

        location /api {
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Host $http_host;
          # we don't want nginx trying to do something clever with
          # redirects, we set the Host: header above already.
          proxy_redirect off;
          # 设置代理服务器的协议和地址
          proxy_pass http://beer:8000;
        }

        # 用户上传的媒体资源文件路径(用户头像)
        location /media/ {
          alias /app/media/;
        }

        # 后端静态资源路径
        location /static/{
          alias /app/static/;
        }

        # 前端静态资源路径
        location /assets/{
          alias /app/assets/;
        }
    }
}